# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models

class Ctgov(models.Model):
    rank = models.TextField(blank=True, null=True)
    required_header_download_date = models.TextField(blank=True, null=True)
    required_header_link_text = models.TextField(blank=True, null=True)
    required_header_url = models.TextField(blank=True, null=True)
    id_info_org_study_id = models.TextField(blank=True, null=True)
    id_info_secondary_id = models.TextField(blank=True, null=True)
    id_info_nct_id = models.TextField(blank=True, null=True)
    brief_title = models.TextField(blank=True, null=True)
    official_title = models.TextField(blank=True, null=True)
    sponsors_lead_sponsor_agency = models.TextField(blank=True, null=True)
    sponsors_lead_sponsor_agency_class = models.TextField(blank=True, null=True)
    source = models.TextField(blank=True, null=True)
    brief_summary_textblock = models.TextField(blank=True, null=True)
    detailed_description_textblock = models.TextField(blank=True, null=True)
    overall_status = models.TextField(blank=True, null=True)
    start_date = models.TextField(blank=True, null=True)
    completion_date_type = models.TextField(blank=True, null=True)
    completion_date = models.TextField(blank=True, null=True)
    primary_completion_date_type = models.TextField(blank=True, null=True)
    primary_completion_date = models.TextField(blank=True, null=True)
    phase = models.TextField(blank=True, null=True)
    study_type = models.TextField(blank=True, null=True)
    has_expanded_access = models.TextField(blank=True, null=True)
    study_design_info_observational_model = models.TextField(blank=True, null=True)
    study_design_info_time_perspective = models.TextField(blank=True, null=True)
    primary_outcome_measure = models.TextField(blank=True, null=True)
    primary_outcome_time_frame = models.TextField(blank=True, null=True)
    enrollment_type = models.TextField(blank=True, null=True)
    enrollment = models.TextField(blank=True, null=True)
    condition = models.TextField(blank=True, null=True)
    eligibility_criteria_textblock = models.TextField(blank=True, null=True)
    eligibility_gender = models.TextField(blank=True, null=True)
    eligibility_minimum_age = models.TextField(blank=True, null=True)
    eligibility_maximum_age = models.TextField(blank=True, null=True)
    eligibility_healthy_volunteers = models.TextField(blank=True, null=True)
    overall_official_last_name = models.TextField(blank=True, null=True)
    overall_official_role = models.TextField(blank=True, null=True)
    overall_official_affiliation = models.TextField(blank=True, null=True)
    overall_contact_last_name = models.TextField(blank=True, null=True)
    overall_contact_phone = models.TextField(blank=True, null=True)
    overall_contact_email = models.TextField(blank=True, null=True)
    location_facility_name = models.TextField(blank=True, null=True)
    location_facility_address_city = models.TextField(blank=True, null=True)
    location_facility_address_country = models.TextField(blank=True, null=True)
    location_status = models.TextField(blank=True, null=True)
    location_contact_last_name = models.TextField(blank=True, null=True)
    location_contact_phone = models.TextField(blank=True, null=True)
    location_contact_email = models.TextField(blank=True, null=True)
    location_countries_country = models.TextField(blank=True, null=True)
    reference_citation = models.TextField(blank=True, null=True)
    reference_pmid = models.TextField(db_column='reference_PMID', blank=True, null=True)  # Field name made lowercase.
    verification_date = models.TextField(blank=True, null=True)
    lastchanged_date = models.TextField(blank=True, null=True)
    firstreceived_date = models.TextField(blank=True, null=True)
    responsible_party_responsible_party_type = models.TextField(blank=True, null=True)
    keyword = models.TextField(blank=True, null=True)
    condition_browse_mesh_term = models.TextField(blank=True, null=True)
    intervention_browse_mesh_term = models.TextField(blank=True, null=True)
    patient_data_sharing_ipd = models.TextField(blank=True, null=True)
    responsible_party_investigator_title = models.TextField(blank=True, null=True)
    responsible_party_investigator_full_name = models.TextField(blank=True, null=True)
    acronym = models.TextField(blank=True, null=True)
    sponsors_collaborator_agency = models.TextField(blank=True, null=True)
    sponsors_collaborator_agency_class = models.TextField(blank=True, null=True)
    oversight_info_has_dmc = models.TextField(blank=True, null=True)
    study_design_info_allocation = models.TextField(blank=True, null=True)
    study_design_info_intervention_model = models.TextField(blank=True, null=True)
    study_design_info_primary_purpose = models.TextField(blank=True, null=True)
    study_design_info_masking = models.TextField(blank=True, null=True)
    primary_outcome_description = models.TextField(blank=True, null=True)
    secondary_outcome_measure = models.TextField(blank=True, null=True)
    secondary_outcome_time_frame = models.TextField(blank=True, null=True)
    secondary_outcome_description = models.TextField(blank=True, null=True)
    number_of_arms = models.TextField(blank=True, null=True)
    arm_group_arm_group_label = models.TextField(blank=True, null=True)
    arm_group_arm_group_type = models.TextField(blank=True, null=True)
    arm_group_description = models.TextField(blank=True, null=True)
    intervention_intervention_type = models.TextField(blank=True, null=True)
    intervention_intervention_name = models.TextField(blank=True, null=True)
    intervention_description = models.TextField(blank=True, null=True)
    intervention_arm_group_label = models.TextField(blank=True, null=True)
    intervention_other_name = models.TextField(blank=True, null=True)
    overall_contact_backup_last_name = models.TextField(blank=True, null=True)
    overall_contact_backup_phone = models.TextField(blank=True, null=True)
    overall_contact_backup_email = models.TextField(blank=True, null=True)
    location_facility_address_zip = models.TextField(blank=True, null=True)
    location_contact_backup_last_name = models.TextField(blank=True, null=True)
    location_contact_backup_phone = models.TextField(blank=True, null=True)
    location_contact_backup_email = models.TextField(blank=True, null=True)
    responsible_party_investigator_affiliation = models.TextField(blank=True, null=True)
    oversight_info_is_fda_regulated_drug = models.TextField(blank=True, null=True)
    oversight_info_is_fda_regulated_device = models.TextField(blank=True, null=True)
    start_date_type = models.TextField(blank=True, null=True)
    number_of_groups = models.TextField(blank=True, null=True)
    eligibility_study_pop_textblock = models.TextField(blank=True, null=True)
    eligibility_sampling_method = models.TextField(blank=True, null=True)
    link_url = models.TextField(blank=True, null=True)
    link_description = models.TextField(blank=True, null=True)
    location_investigator_last_name = models.TextField(blank=True, null=True)
    location_investigator_role = models.TextField(blank=True, null=True)
    location_facility_address_state = models.TextField(blank=True, null=True)
    results_reference_citation = models.TextField(blank=True, null=True)
    results_reference_pmid = models.TextField(db_column='results_reference_PMID', blank=True, null=True)  # Field name made lowercase.
    patient_data_ipd_description = models.TextField(blank=True, null=True)
    location_contact_phone_ext = models.TextField(blank=True, null=True)
    overall_contact_phone_ext = models.TextField(blank=True, null=True)
    other_outcome_measure = models.TextField(blank=True, null=True)
    other_outcome_time_frame = models.TextField(blank=True, null=True)
    other_outcome_description = models.TextField(blank=True, null=True)
    overall_contact_backup_phone_ext = models.TextField(blank=True, null=True)
    location_contact_backup_phone_ext = models.TextField(blank=True, null=True)
    firstreceived_results_date = models.TextField(blank=True, null=True)
    biospec_retention = models.TextField(blank=True, null=True)
    biospec_descr_textblock = models.TextField(blank=True, null=True)
    target_duration = models.TextField(blank=True, null=True)
    why_stopped = models.TextField(blank=True, null=True)
    oversight_info_is_unapproved_device = models.TextField(blank=True, null=True)
    oversight_info_is_ppsd = models.TextField(blank=True, null=True)
    responsible_party_name_title = models.TextField(blank=True, null=True)
    responsible_party_organization = models.TextField(blank=True, null=True)
    firstreceived_results_disposition_date = models.TextField(blank=True, null=True)
    study_design_info_masking_description = models.TextField(blank=True, null=True)
    id_info_nct_alias = models.TextField(blank=True, null=True)
    last_known_status = models.TextField(blank=True, null=True)
    removed_countries_country = models.TextField(blank=True, null=True)
    study_docs_study_doc_doc_id = models.TextField(blank=True, null=True)
    study_docs_study_doc_doc_type = models.TextField(blank=True, null=True)
    study_docs_study_doc_doc_url = models.TextField(blank=True, null=True)
    study_docs_study_doc_doc_comment = models.TextField(blank=True, null=True)
    study_design_info_intervention_model_description = models.TextField(blank=True, null=True)
    oversight_info_is_us_export = models.TextField(blank=True, null=True)
    eligibility_gender_based = models.TextField(blank=True, null=True)
    eligibility_gender_description = models.TextField(blank=True, null=True)
    expanded_access_info_expanded_access_type_treatment = models.TextField(blank=True, null=True)
    expanded_access_info_expanded_access_type_individual = models.TextField(blank=True, null=True)
    expanded_access_info_expanded_access_type_intermediate = models.TextField(blank=True, null=True)

    def get_fields(self):
        return [(field.name, field.value_to_string(self)) for field in Ctgov._meta.fields]

    class Meta:
        managed = False
        db_table = 'ctgov'